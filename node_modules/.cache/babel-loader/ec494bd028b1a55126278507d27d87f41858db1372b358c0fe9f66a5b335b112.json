{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adity\\\\portfolio_kris\\\\src\\\\components\\\\Music.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientId = \"3d8688b460024ef7ad2dcd6ab4982597\";\nconst redirectUri = \"http://localhost:3000/\";\nconst scopes = [\"user-read-currently-playing\", \"user-read-playback-state\"];\nconst Music = () => {\n  _s();\n  const [token, setToken] = useState(null);\n  const [song, setSong] = useState(null);\n\n  // Step 1: Redirect to Spotify login\n  const login = () => {\n    window.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}`;\n  };\n\n  // Step 2: Parse token from URL hash\n  useEffect(() => {\n    const hash = window.location.hash;\n    if (hash) {\n      const tokenMatch = hash.match(/access_token=([^&]*)/);\n      if (tokenMatch) {\n        const accessToken = tokenMatch[1];\n        setToken(accessToken);\n        window.history.replaceState(null, null, \" \"); // Remove hash from URL\n      }\n    }\n  }, []);\n\n  // Step 3: Fetch currently playing song\n  useEffect(() => {\n    if (!token) return;\n    const fetchSong = async () => {\n      const res = await fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (res.status === 204) {\n        setSong(null); // Nothing playing\n        return;\n      }\n      const data = await res.json();\n      setSong(data);\n    };\n    fetchSong();\n\n    // Refresh every 10 seconds\n    const interval = setInterval(fetchSong, 10000);\n    return () => clearInterval(interval);\n  }, [token]);\n\n  // Not logged in\n  if (!token) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: login,\n      className: \"bg-black text-white px-4 py-2 rounded\",\n      children: \"Connect Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }, this);\n\n  // Nothing playing\n  if (!song) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"text-sm text-gray-500 text-center\",\n    children: \"No song currently playing\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center gap-4 border p-4 rounded bg-white shadow w-full max-w-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: song.item.album.images[1].url,\n      alt: \"Album Cover\",\n      className: \"w-16 h-16 rounded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-semibold text-black\",\n        children: song.item.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-600\",\n        children: song.item.artists[0].name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(Music, \"srcum56163oOGDz/nGOcO0t0OHM=\");\n_c = Music;\nexport default Music;\nvar _c;\n$RefreshReg$(_c, \"Music\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","clientId","redirectUri","scopes","Music","_s","token","setToken","useState","song","setSong","login","window","location","join","useEffect","hash","tokenMatch","match","accessToken","history","replaceState","fetchSong","res","fetch","headers","Authorization","status","data","json","interval","setInterval","clearInterval","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","item","album","images","url","alt","name","artists","_c","$RefreshReg$"],"sources":["C:/Users/adity/portfolio_kris/src/components/Music.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst clientId = \"3d8688b460024ef7ad2dcd6ab4982597\";\r\nconst redirectUri = \"http://localhost:3000/\";\r\nconst scopes = [\"user-read-currently-playing\", \"user-read-playback-state\"];\r\n\r\nconst Music = () => {\r\n  const [token, setToken] = useState(null);\r\n  const [song, setSong] = useState(null);\r\n\r\n  // Step 1: Redirect to Spotify login\r\n  const login = () => {\r\n    window.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&redirect_uri=${redirectUri}&scope=${scopes.join(\r\n      \"%20\"\r\n    )}`;\r\n  };\r\n\r\n  // Step 2: Parse token from URL hash\r\n  useEffect(() => {\r\n    const hash = window.location.hash;\r\n    if (hash) {\r\n      const tokenMatch = hash.match(/access_token=([^&]*)/);\r\n      if (tokenMatch) {\r\n        const accessToken = tokenMatch[1];\r\n        setToken(accessToken);\r\n        window.history.replaceState(null, null, \" \"); // Remove hash from URL\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Step 3: Fetch currently playing song\r\n  useEffect(() => {\r\n    if (!token) return;\r\n\r\n    const fetchSong = async () => {\r\n      const res = await fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (res.status === 204) {\r\n        setSong(null); // Nothing playing\r\n        return;\r\n      }\r\n\r\n      const data = await res.json();\r\n      setSong(data);\r\n    };\r\n\r\n    fetchSong();\r\n\r\n    // Refresh every 10 seconds\r\n    const interval = setInterval(fetchSong, 10000);\r\n    return () => clearInterval(interval);\r\n  }, [token]);\r\n\r\n  // Not logged in\r\n  if (!token)\r\n    return (\r\n      <div className=\"text-center\">\r\n        <button onClick={login} className=\"bg-black text-white px-4 py-2 rounded\">\r\n          Connect Spotify\r\n        </button>\r\n      </div>\r\n    );\r\n\r\n  // Nothing playing\r\n  if (!song)\r\n    return <p className=\"text-sm text-gray-500 text-center\">No song currently playing</p>;\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-4 border p-4 rounded bg-white shadow w-full max-w-md\">\r\n      <img\r\n        src={song.item.album.images[1].url}\r\n        alt=\"Album Cover\"\r\n        className=\"w-16 h-16 rounded\"\r\n      />\r\n      <div>\r\n        <p className=\"font-semibold text-black\">{song.item.name}</p>\r\n        <p className=\"text-sm text-gray-600\">{song.item.artists[0].name}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Music;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}